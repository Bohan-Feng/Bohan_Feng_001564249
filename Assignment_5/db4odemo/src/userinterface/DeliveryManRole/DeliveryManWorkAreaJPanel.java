/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Order.Order;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount userAccount;
    private DeliveryMan man;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.system = business;
        this.man = (DeliveryMan) this.system
                .getDeliveryManDirectory()
                .stream()
                .filter(dm -> dm.getAccount() == userAccount)
                .toArray()[0];
        populateData();
    }
    
    public void populateData(){
        this.LabelHeader.setText("Orders for " + man + "");
        populateReady();
        populateDelivering();
        populateComplete();
    }
    
    public void populateReady(){
        DefaultTableModel model = (DefaultTableModel)tableReady.getModel();
        model.setRowCount(0);
        for(Order o : system.getOrderDirectory().getOrdersBySenderID(this.man.getID())){
            if(o.getStatus().equals("ready to pick up")){
                model.addRow(makeRow(o));
            }
        }
    }
    
    public void populateDelivering(){
        DefaultTableModel model = (DefaultTableModel)tableDelivering.getModel();
        model.setRowCount(0);
        for(Order o : system.getOrderDirectory().getOrdersBySenderID(this.man.getID())){
            if(o.getStatus().equals("Delivering")){
                model.addRow(makeRow(o));
            }
        }
    }
    
    public void populateComplete(){
        DefaultTableModel model = (DefaultTableModel)tableComplete.getModel();
        model.setRowCount(0);
        for(Order o : system.getOrderDirectory().getOrdersBySenderID(this.man.getID())){
            if(o.getStatus().equals("Complete")){
                model.addRow(makeRow(o));
            }
        }
    }
    
    public Object[] makeRow(Order o){
        Object row[]  = new Object[5];
        row[0] = o;
        row[1] = system.getRestaurantDirectory().getRestaurantByID(o.getRestaurnatID());
        row[2] = system.getCustomerDirectory().getCustomerByID(o.getReceiverID());
        row[3] = o.getAddress();
        row[4] = o.getStatus();
        return row;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableReady = new javax.swing.JTable();
        btnPick = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        LabelHeader = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDelivering = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableComplete = new javax.swing.JTable();
        btnComplete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        tableReady.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Restaurant", "Receiver", "Address", "Status"
            }
        ));
        jScrollPane1.setViewportView(tableReady);

        btnPick.setText(" Pick Up");
        btnPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPickActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        LabelHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        LabelHeader.setText("Orders for <DeliveryMan' name>");

        tableDelivering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Restaurant", "Receiver", "Address", "Status"
            }
        ));
        jScrollPane2.setViewportView(tableDelivering);

        tableComplete.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Restaurant", "Receiver", "Address", "Status"
            }
        ));
        jScrollPane3.setViewportView(tableComplete);

        btnComplete.setText("Complete");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Ready to pick up");

        jLabel2.setText("Delivering");

        jLabel3.setText("Completed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabelHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshJButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPick, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnComplete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelHeader)
                    .addComponent(refreshJButton))
                .addGap(3, 3, 3)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPick))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnComplete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPickActionPerformed
        int row = tableReady.getSelectedRow();
        if(row < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Order toPick = (Order)tableReady.getValueAt(row, 0);
        toPick.pickupDelivery();
        populateReady();
        populateDelivering();
    }//GEN-LAST:event_btnPickActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateData();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        int row = tableDelivering.getSelectedRow();
        if(row < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Order toComplete = (Order)tableDelivering.getValueAt(row, 0);
        toComplete.resolveOrder();
        populateDelivering();
        populateComplete();
    }//GEN-LAST:event_btnCompleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelHeader;
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnPick;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tableComplete;
    private javax.swing.JTable tableDelivering;
    private javax.swing.JTable tableReady;
    // End of variables declaration//GEN-END:variables
}
